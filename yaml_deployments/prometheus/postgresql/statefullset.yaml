apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-1600344618
  labels:
    helm.sh/chart: postgresql-0.1.0
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: postgresql-1600344618
    app.kubernetes.io/version: "9.6"
    app.kubernetes.io/managed-by: Helm
    snappyflow/projectName: sample-project
    snappyflow/appName: sample-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: postgresql-1600344618
  serviceName: postgresql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: postgresql-1600344618
    spec:
      serviceAccountName: default
      securityContext:
        {}
      containers:
        # Prometheus exporter container for postgresql
        - name: postgres-exporter
          image: bitnami/postgres-exporter
          ports:
            - name: pg-exporter
              containerPort: 9187
          command: ["/bin/sh", "-c"]
          args: ['DATA_SOURCE_NAME="postgresql://postgres:rootPassword@hostIP:hostPort/dbname?sslmode=disable" /opt/bitnami/postgres-exporter/bin/postgres_exporter']
          
        # Postgres DB container which is configured to write logs to stdout
        - name: postgresql
          securityContext:
            {}
          image: "postgres:9.6"
          args: ["-c", "log_statement=all","-c","log_line_prefix=< %m >"]
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-1600344618
                  key: rootPassword
            - name: PG_MULTI_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-1600344618
                  key: multidbUserPassword
            - name: POSTGRES_USER
              value: postgres
            - name: PG_MULTI_DB_USER
              value: data
            - name: PG_MULTI_DB
              value: db1;db2
            - name: PGDATA
              value: "/data/pgdata"
          ports:
            - name: tcp
              containerPort: 5432
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - sh 
                - -c 
                - "pg_isready -U ${POSTGRES_USER}"
            initialDelaySeconds: 30
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
                - sh 
                - -c 
                - "pg_isready -U ${POSTGRES_USER}"
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          volumeMounts:
          - name: data
            mountPath: /data
            subPath: pgdata
          - name: initconfig
            mountPath: /docker-entrypoint-initdb.d
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 128Mi
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: postgresql-1600344618
      - name: initconfig
        configMap:
          name: postgresql-1600344618-init

